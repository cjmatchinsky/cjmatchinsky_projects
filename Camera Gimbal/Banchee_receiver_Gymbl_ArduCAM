#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <Servo.h>

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 32  // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

RF24 radio(7, 8);  // CE, CSN
const byte address[6] = "07701";
const uint8_t channel = 104;

struct UltraSonic {
  int ultraSonicNum;
};
UltraSonic ultraSonicData;

bool conn = false;

Servo myservo1;
Servo myservo2;

char inByte;
int speedStep;
int servoID;

int posServo0;
int posServo1;

void setup() {
  // Set Up Serial Comms - Debug
  Serial.begin(9600);

  // Set up Radio
  radio.begin();
  radio.openReadingPipe(1, address);
  radio.setPALevel(RF24_PA_LOW, 0);
  radio.setChannel(channel);
  Serial.println("Starting Radio");

  // Check for OLED Availability
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }

  display.clearDisplay();

  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
  display.println("LOADING...");
  display.setCursor(0, 20);
  display.display();
  delay(2500);

  // To receive
  radio.startListening();

  myservo1.attach(10);
  myservo2.attach(9);

  posServo0 = 45;
  posServo1 = 90;
}

void loop() {
  int data[] = {0, 0};
  if (radio.available()) {
    conn = true;

    radio.read(&data, sizeof(data));

    // Will delay code, only use if necessary
    debug(data);

    int temp0 = 0;
    int temp1 = 0;

    if ((data[0]) < 500) {
      temp0 = map(data[0], 0, 495, 20, 0);
      if ((posServo0 + temp0) > 40) {
        posServo0 = posServo0 - temp0;
      }
    }

    if ((data[0]) > 500) {
      temp0 = map(data[0], 520, 1023, 0, 20);
      if ((posServo0 + temp0) < 150) {
        posServo0 = posServo0 + temp0;
      }
    }

    if (posServo0 < 20) {
      posServo0 = 21;
    }

    if (posServo1 < 0) {
      posServo1 = 0;
    }

    if ((data[1]) < 550) {
      temp1 = map(data[1], 0, 495, 15, 0);
      if ((posServo1 + temp1) > 0) {
        posServo1 = posServo1 - temp1;
      }
    }

    if ((data[1]) > 550) {
      temp1 = map(data[1], 520, 1023, 0, 15);
      if ((posServo1 + temp1) < 180) {
        posServo1 = posServo1 + temp1;
      }

      myservo1.write(posServo0);
      myservo2.write(posServo1);
      delay(4);
    }
  } else {
    Serial.println("NO CONNECTION");
    conn = false;
  }

  OLED_display(data[0], data[1], posServo0, posServo1);
}

void OLED_display(int y, int x, int posY, int posX) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);

  if (conn) {
    display.println("RF Status: PASS");
  } else {
    display.println("RF Status: FAIL");
  }

  display.setCursor(0, 10);
  display.println("X= ");
  display.setCursor(18, 10);
  display.println(x);
  display.setCursor(50, 10);
  display.println("Y= ");
  display.setCursor(63, 10);
  display.println(y);
  display.setCursor(0, 20);
  display.println("CAM POS: ");
  display.setCursor(50, 20);
  display.println(posX);
  display.setCursor(68, 20);
  display.println(",");
  display.setCursor(76, 20);
  display.println(posY);
  display.setCursor(90, 10);
  display.println("Ultra:");
  display.setCursor(98, 20);
  display.println("n/a");

  display.display();
}

void debug(int data[]) {
  // THIS IS FOR DEBUG
  Serial.print("LY: ");
  Serial.println(data[0]);
  Serial.print(";   LX: ");
  Serial.println(data[1]);

  delay(5);
}
